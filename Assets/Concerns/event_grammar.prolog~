:- op(1200, xfx, >-->).

%% next_events(Nonterminal, History, Events)
%  Events is a list of possible events that can come after History
%  for Nonterminal
next_events(Nonterminal, History, Events) :-
   append(History, [E], ExtendedHistory),
   all(E, grammar_prefix(ExtendedHistory, [], Nonterminal).

%% grammar_prefix(+List, -Tail, +GrammarSymbols)
%  Either List is a prefix of a string generated by GrammarSymbols
%  or List can be partitioned into Start + Tail, such that Start is
%  a string generated by GrammarSymbols.
grammar_prefix([], [], _) :- !.
grammar_prefix(L, L, []) :- !.
grammar_prefix([E| ET], R, [E | GR]) :-
   grammar_prefix(ET, R, GR).
grammar_prefix(H, R, (A, B)) :-
   grammar_prefix(H, I, A),
   grammar_prefix(I, R, B).
grammar_prefix(H, H, { Proposition }) :-
   Proposition.
grammar_prefix(H, R, Nonterminal) :-
   (Nonterminal >--> Expansion),
   grammar_prefix(H, R, Expansion). 

